import asyncio
import logging
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.enums import ParseMode
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.bot import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à)
TOKEN = "7702003437:AAFO3pnQVJsvZkXAy_KlKMXLM1T2Dpy7ylA"

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ In-Memory Storage –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –≤–∏–±–æ—Ä—É –º–æ–≤–∏
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –¥–≤–æ—Ö –º–æ–≤
LANGUAGES = {
    "uk": {
        "start": "–ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å—É –Ω–∞ –ø–æ—Å–ª—É–≥—É. –û–±–µ—Ä–∏ –º–æ–≤—É:",
        "choose": "–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É üåç",
        "book": "üìÖ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è",
        "my_bookings": "üìù –ú–æ—ó –∑–∞–ø–∏—Å–∏",
        "cancel": "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å",
        "select_time": "–í–∏–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É —ñ —á–∞—Å –¥–ª—è –∑–∞–ø–∏—Å—É:",
        "your_bookings": "–û—Å—å –≤–∞—à—ñ –∑–∞–ø–∏—Å–∏:"
    },
    "en": {
        "start": "Hello! I'm your appointment bot. Choose a language:",
        "choose": "Choose a language üåç",
        "book": "üìÖ Book an appointment",
        "my_bookings": "üìù My bookings",
        "cancel": "‚ùå Cancel booking",
        "select_time": "Select a date and time for your appointment:",
        "your_bookings": "Here are your bookings:"
    }
}

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∏–±–æ—Ä—É –º–æ–≤–∏
language_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data="lang_uk")],
        [InlineKeyboardButton(text="üá¨üáß English", callback_data="lang_en")]
    ]
)

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏–±–æ—Ä—É –º–æ–≤–∏
user_languages = {}

# –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥–∏ /start
@router.message(F.text == "/start")
async def cmd_start(message: types.Message):
    await message.answer(LANGUAGES["uk"]["start"], reply_markup=language_keyboard)

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –º–æ–≤–∏
@router.callback_query(F.data.startswith("lang_"))
async def set_language(callback: types.CallbackQuery, state: FSMContext):
    lang = callback.data.split("_")[1]  # "uk" –∞–±–æ "en"
    user_languages[callback.from_user.id] = lang

    # –°—Ç–≤–æ—Ä—é—î–º–æ –≥–æ–ª–æ–≤–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=LANGUAGES[lang]["book"])],
            [KeyboardButton(text=LANGUAGES[lang]["my_bookings"])]
        ],
        resize_keyboard=True
    )

    await callback.message.answer(LANGUAGES[lang]["choose"], reply_markup=keyboard)
    await callback.answer()

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å—É
@router.message(lambda message: message.text in [LANGUAGES["uk"]["book"], LANGUAGES["en"]["book"]])
async def cmd_book(message: types.Message):
    lang = user_languages.get(message.from_user.id, "uk")  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞
    await message.answer(LANGUAGES[lang]["select_time"])

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å–≤–æ—ó—Ö –∑–∞–ø–∏—Å—ñ–≤
@router.message(lambda message: message.text in [LANGUAGES["uk"]["my_bookings"], LANGUAGES["en"]["my_bookings"]])
async def cmd_my_bookings(message: types.Message):
    lang = user_languages.get(message.from_user.id, "uk")
    await message.answer(LANGUAGES[lang]["your_bookings"])

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É
@router.message(lambda message: message.text.startswith(LANGUAGES["uk"]["cancel"]) or message.text.startswith(LANGUAGES["en"]["cancel"]))
async def cmd_cancel(message: types.Message):
    lang = user_languages.get(message.from_user.id, "uk")
    booking_id = message.text.split(' ')[-1]  # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ ID –∑–∞–ø–∏—Å—É –ø—ñ—Å–ª—è –ø—Ä–æ–±—ñ–ª—É
    await message.answer(f"{LANGUAGES[lang]['cancel']} {booking_id}!")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
